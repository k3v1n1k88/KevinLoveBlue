/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package k3v1n1k88.TestLogScribe;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-29")
public class TPlayer implements org.apache.thrift.TBase<TPlayer, TPlayer._Fields>, java.io.Serializable, Cloneable, Comparable<TPlayer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlayer");

  private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("currentItem", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("currentStatus", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPlayerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPlayerTupleSchemeFactory();

  public int playerID; // required
  /**
   * 
   * @see Item
   */
  public Item currentItem; // required
  /**
   * 
   * @see Status
   */
  public Status currentStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYER_ID((short)1, "playerID"),
    /**
     * 
     * @see Item
     */
    CURRENT_ITEM((short)2, "currentItem"),
    /**
     * 
     * @see Status
     */
    CURRENT_STATUS((short)3, "currentStatus");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYER_ID
          return PLAYER_ID;
        case 2: // CURRENT_ITEM
          return CURRENT_ITEM;
        case 3: // CURRENT_STATUS
          return CURRENT_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAYERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_ITEM, new org.apache.thrift.meta_data.FieldMetaData("currentItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Item.class)));
    tmpMap.put(_Fields.CURRENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("currentStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlayer.class, metaDataMap);
  }

  public TPlayer() {
  }

  public TPlayer(
    int playerID,
    Item currentItem,
    Status currentStatus)
  {
    this();
    this.playerID = playerID;
    setPlayerIDIsSet(true);
    this.currentItem = currentItem;
    this.currentStatus = currentStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlayer(TPlayer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.playerID = other.playerID;
    if (other.isSetCurrentItem()) {
      this.currentItem = other.currentItem;
    }
    if (other.isSetCurrentStatus()) {
      this.currentStatus = other.currentStatus;
    }
  }

  public TPlayer deepCopy() {
    return new TPlayer(this);
  }

  @Override
  public void clear() {
    setPlayerIDIsSet(false);
    this.playerID = 0;
    this.currentItem = null;
    this.currentStatus = null;
  }

  public int getPlayerID() {
    return this.playerID;
  }

  public TPlayer setPlayerID(int playerID) {
    this.playerID = playerID;
    setPlayerIDIsSet(true);
    return this;
  }

  public void unsetPlayerID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  /** Returns true if field playerID is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  public void setPlayerIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
  }

  /**
   * 
   * @see Item
   */
  public Item getCurrentItem() {
    return this.currentItem;
  }

  /**
   * 
   * @see Item
   */
  public TPlayer setCurrentItem(Item currentItem) {
    this.currentItem = currentItem;
    return this;
  }

  public void unsetCurrentItem() {
    this.currentItem = null;
  }

  /** Returns true if field currentItem is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentItem() {
    return this.currentItem != null;
  }

  public void setCurrentItemIsSet(boolean value) {
    if (!value) {
      this.currentItem = null;
    }
  }

  /**
   * 
   * @see Status
   */
  public Status getCurrentStatus() {
    return this.currentStatus;
  }

  /**
   * 
   * @see Status
   */
  public TPlayer setCurrentStatus(Status currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  public void unsetCurrentStatus() {
    this.currentStatus = null;
  }

  /** Returns true if field currentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentStatus() {
    return this.currentStatus != null;
  }

  public void setCurrentStatusIsSet(boolean value) {
    if (!value) {
      this.currentStatus = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PLAYER_ID:
      if (value == null) {
        unsetPlayerID();
      } else {
        setPlayerID((java.lang.Integer)value);
      }
      break;

    case CURRENT_ITEM:
      if (value == null) {
        unsetCurrentItem();
      } else {
        setCurrentItem((Item)value);
      }
      break;

    case CURRENT_STATUS:
      if (value == null) {
        unsetCurrentStatus();
      } else {
        setCurrentStatus((Status)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYER_ID:
      return getPlayerID();

    case CURRENT_ITEM:
      return getCurrentItem();

    case CURRENT_STATUS:
      return getCurrentStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PLAYER_ID:
      return isSetPlayerID();
    case CURRENT_ITEM:
      return isSetCurrentItem();
    case CURRENT_STATUS:
      return isSetCurrentStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlayer)
      return this.equals((TPlayer)that);
    return false;
  }

  public boolean equals(TPlayer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_playerID = true;
    boolean that_present_playerID = true;
    if (this_present_playerID || that_present_playerID) {
      if (!(this_present_playerID && that_present_playerID))
        return false;
      if (this.playerID != that.playerID)
        return false;
    }

    boolean this_present_currentItem = true && this.isSetCurrentItem();
    boolean that_present_currentItem = true && that.isSetCurrentItem();
    if (this_present_currentItem || that_present_currentItem) {
      if (!(this_present_currentItem && that_present_currentItem))
        return false;
      if (!this.currentItem.equals(that.currentItem))
        return false;
    }

    boolean this_present_currentStatus = true && this.isSetCurrentStatus();
    boolean that_present_currentStatus = true && that.isSetCurrentStatus();
    if (this_present_currentStatus || that_present_currentStatus) {
      if (!(this_present_currentStatus && that_present_currentStatus))
        return false;
      if (!this.currentStatus.equals(that.currentStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + playerID;

    hashCode = hashCode * 8191 + ((isSetCurrentItem()) ? 131071 : 524287);
    if (isSetCurrentItem())
      hashCode = hashCode * 8191 + currentItem.getValue();

    hashCode = hashCode * 8191 + ((isSetCurrentStatus()) ? 131071 : 524287);
    if (isSetCurrentStatus())
      hashCode = hashCode * 8191 + currentStatus.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TPlayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPlayerID()).compareTo(other.isSetPlayerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerID, other.playerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrentItem()).compareTo(other.isSetCurrentItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentItem, other.currentItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrentStatus()).compareTo(other.isSetCurrentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentStatus, other.currentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPlayer(");
    boolean first = true;

    sb.append("playerID:");
    sb.append(this.playerID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentItem:");
    if (this.currentItem == null) {
      sb.append("null");
    } else {
      sb.append(this.currentItem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentStatus:");
    if (this.currentStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.currentStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlayerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPlayerStandardScheme getScheme() {
      return new TPlayerStandardScheme();
    }
  }

  private static class TPlayerStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPlayer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playerID = iprot.readI32();
              struct.setPlayerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentItem = k3v1n1k88.TestLogScribe.Item.findByValue(iprot.readI32());
              struct.setCurrentItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentStatus = k3v1n1k88.TestLogScribe.Status.findByValue(iprot.readI32());
              struct.setCurrentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlayer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
      oprot.writeI32(struct.playerID);
      oprot.writeFieldEnd();
      if (struct.currentItem != null) {
        oprot.writeFieldBegin(CURRENT_ITEM_FIELD_DESC);
        oprot.writeI32(struct.currentItem.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.currentStatus != null) {
        oprot.writeFieldBegin(CURRENT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.currentStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlayerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPlayerTupleScheme getScheme() {
      return new TPlayerTupleScheme();
    }
  }

  private static class TPlayerTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPlayer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPlayerID()) {
        optionals.set(0);
      }
      if (struct.isSetCurrentItem()) {
        optionals.set(1);
      }
      if (struct.isSetCurrentStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPlayerID()) {
        oprot.writeI32(struct.playerID);
      }
      if (struct.isSetCurrentItem()) {
        oprot.writeI32(struct.currentItem.getValue());
      }
      if (struct.isSetCurrentStatus()) {
        oprot.writeI32(struct.currentStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.playerID = iprot.readI32();
        struct.setPlayerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currentItem = k3v1n1k88.TestLogScribe.Item.findByValue(iprot.readI32());
        struct.setCurrentItemIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currentStatus = k3v1n1k88.TestLogScribe.Status.findByValue(iprot.readI32());
        struct.setCurrentStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

